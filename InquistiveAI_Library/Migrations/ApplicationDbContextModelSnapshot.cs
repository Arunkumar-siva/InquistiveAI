// <auto-generated />
using System;
using InquistiveAI_Library.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InquistiveAI_Library.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InquisitiveAiLibrary.Model.EmployeeDetails", b =>
                {
                    b.Property<string>("AceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("AceId");

                    b.HasIndex("BatchId");

                    b.HasIndex("RoleId");

                    b.ToTable("EmployeeDetails");
                });

            modelBuilder.Entity("InquistiveAI_Library.Model.AssesmentDetails", b =>
                {
                    b.Property<int>("AssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssessmentId"));

                    b.Property<DateTime>("AssessmentUploadedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssessmentId");

                    b.HasIndex("BatchId")
                        .IsUnique();

                    b.ToTable("AssesmentDetails");
                });

            modelBuilder.Entity("InquistiveAI_Library.Model.BatchDetails", b =>
                {
                    b.Property<int>("BatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BatchId"));

                    b.Property<DateTime>("BatchMonth")
                        .HasColumnType("datetime2");

                    b.Property<string>("BatchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BatchId");

                    b.ToTable("BatchDetails");
                });

            modelBuilder.Entity("InquistiveAI_Library.Model.EmployeeAssesmentDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssessmentSubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AceId")
                        .IsUnique();

                    b.HasIndex("AssessmentId");

                    b.HasIndex("BatchId");

                    b.ToTable("EmployeeAssesmentDetails");
                });

            modelBuilder.Entity("InquistiveAI_Library.Model.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AceId")
                        .IsUnique();

                    b.ToTable("Login");
                });

            modelBuilder.Entity("InquistiveAI_Library.Model.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("InquisitiveAiLibrary.Model.EmployeeDetails", b =>
                {
                    b.HasOne("InquistiveAI_Library.Model.BatchDetails", "BatchDetails")
                        .WithMany("EmployeeDetails")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InquistiveAI_Library.Model.Roles", "Roles")
                        .WithMany("EmployeeDetails")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BatchDetails");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("InquistiveAI_Library.Model.AssesmentDetails", b =>
                {
                    b.HasOne("InquistiveAI_Library.Model.BatchDetails", "BatchDetails")
                        .WithOne("AssesmentDetails")
                        .HasForeignKey("InquistiveAI_Library.Model.AssesmentDetails", "BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BatchDetails");
                });

            modelBuilder.Entity("InquistiveAI_Library.Model.EmployeeAssesmentDetails", b =>
                {
                    b.HasOne("InquisitiveAiLibrary.Model.EmployeeDetails", "EmployeeDetails")
                        .WithOne("EmployeeAssessmentDetails")
                        .HasForeignKey("InquistiveAI_Library.Model.EmployeeAssesmentDetails", "AceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InquistiveAI_Library.Model.AssesmentDetails", "AssesmentDetails")
                        .WithMany("EmployeeAssesments")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InquistiveAI_Library.Model.BatchDetails", "BatchDetails")
                        .WithMany("EmployeeAssesmentDetails")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssesmentDetails");

                    b.Navigation("BatchDetails");

                    b.Navigation("EmployeeDetails");
                });

            modelBuilder.Entity("InquistiveAI_Library.Model.Login", b =>
                {
                    b.HasOne("InquisitiveAiLibrary.Model.EmployeeDetails", "EmployeeDetails")
                        .WithOne("Login")
                        .HasForeignKey("InquistiveAI_Library.Model.Login", "AceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeDetails");
                });

            modelBuilder.Entity("InquisitiveAiLibrary.Model.EmployeeDetails", b =>
                {
                    b.Navigation("EmployeeAssessmentDetails")
                        .IsRequired();

                    b.Navigation("Login")
                        .IsRequired();
                });

            modelBuilder.Entity("InquistiveAI_Library.Model.AssesmentDetails", b =>
                {
                    b.Navigation("EmployeeAssesments");
                });

            modelBuilder.Entity("InquistiveAI_Library.Model.BatchDetails", b =>
                {
                    b.Navigation("AssesmentDetails")
                        .IsRequired();

                    b.Navigation("EmployeeAssesmentDetails");

                    b.Navigation("EmployeeDetails");
                });

            modelBuilder.Entity("InquistiveAI_Library.Model.Roles", b =>
                {
                    b.Navigation("EmployeeDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
